buildscript {
    ext{
        // 阿里仓库地址
        AliRepositorieUrl = 'http://maven.aliyun.com/nexus/content/groups/public/'
        versions = [

                // spring boot 2.2 性特性 https://zhuanlan.zhihu.com/p/95545254
                // SpringBoot2.2的底层Spring Framework版本升级为5.2。
                springBootVarsion = '2.2.13.RELEASE',  // spring boot 版本
                // springframeworkVersion = '5.2.4.RELEASE',  // spring framework 版本

                springCloudVersion = "Hoxton.SR3", // spring cloud 版本
                // springOpenfeignVersion = "2.1.3.RELEASE",
                //  截止到2020-03-06  springboot alibaba 还没有升级到 spring boot2.2 的版本，
                springBootAlibabaVersion = "2.2.1.RELEASE" ,
                alibabaNacosVersion = "2.2.1.RELEASE" , // nacos

                druidStarterVersion = '1.1.21',

                junitVersion = '4.12',
                ingfoxSwagger2Version = '2.8.0',
                lombokVersion = '1.18.6',
                mybatisPlusVersion = '3.3.2',
                hibernateValidatorVersion = '6.0.16.Final',
                servletApiVersion = '4.0.1',
                commonsCollections4Version = '4.3',
                commonsLangVersion = '3.9',


        ]
        lib =[
                //spring
                "spring-boot-starter"                 : "org.springframework.boot:spring-boot-starter:${springBootVarsion}",
                "spring-boot-starter-aop"             : "org.springframework.boot:spring-boot-starter-aop:${springBootVarsion}",
                "spring-boot-starter-logging"         : "org.springframework.boot:spring-boot-starter-logging:${springBootVarsion}",
                "spring-boot-starter-data-mongodb"    : "org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVarsion}",
                "spring-boot-starter-data-redis"      : "org.springframework.boot:spring-boot-starter-data-redis:${springBootVarsion}",
                "spring-boot-starter-web"             : "org.springframework.boot:spring-boot-starter-web:${springBootVarsion}",
                "spring-boot-autoconfigure"           : "org.springframework.boot:spring-boot-autoconfigure:${springBootVarsion}",
                //"spring-boot-configuration-processor" : "org.springframework.boot.spring-boot-configuration-processor:${springBootVarsion}",
                "spring-boot-configuration-processor" : "org.springframework.boot:spring-boot-configuration-processor:${springBootVarsion}",
                "spring-boot-starter-thymeleaf"       : "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVarsion}",
                "spring-boot-starter-security"        : "org.springframework.boot:spring-boot-starter-security:${springBootVarsion}",
                "spring-security-oauth2-autoconfigure": "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:${springBootVarsion}",
                "spring-boot-devtools"                : "org.springframework.boot:spring-boot-devtools:${springBootVarsion}",
                "lombok"                              : "org.projectlombok:lombok:${lombokVersion}",
                "javax.servlet-api"                   : "javax.servlet:javax.servlet-api:${servletApiVersion}",
                "hibernate-validator"                 : "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}",
                "spring-boot-starter-actuator"        : "org.springframework.boot:spring-boot-starter-actuator:${springBootVarsion}",
                // springCloud
                "spring-cloud-dependencies"           : "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}",
                "spring-cloud-starter-consul-discovery" : "org.springframework.cloud:spring-cloud-starter-consul-discovery",
                "spring-cloud-starter-gateway"        : "org.springframework.cloud:spring-cloud-starter-gateway",
                "spring-cloud-starter-openfeign"      : "org.springframework.cloud:spring-cloud-starter-openfeign",
                // "org.springframework.cloud"           : "spring-cloud-starter-sleuth",
                //"org.springframework.cloud"           : "org.springframework.cloud",
                //spring boot alibaba
                "spring-cloud-alibaba-dependencies"   : "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springBootAlibabaVersion}",
                // 注册中心 nacos
                "spring-cloud-starter-alibaba-nacos-discovery" : "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:${springBootAlibabaVersion}",
                // nacos 配置中心
                "spring-cloud-starter-alibaba-nacos-config" : "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:${springBootAlibabaVersion}",
                // 私包

                //test
                "junit"                               : "junit:junit:4.12",
                "spring-boot-starter-test"            : "org.springframework.boot:spring-boot-starter-test:${springBootVarsion}",
                "assertj-core"                        : "org.assertj:assertj-core:3.12.2",
                "junit-jupiter-api"                   : "org.junit.jupiter:junit-jupiter-api:5.4.0",
                "junit-jupiter-engine"                : "org.junit.jupiter:junit-jupiter-engine:5.4.0",
                "mockito-all"                         : "org.mockito:mockito-all:1.10.19",
                "fastjson"                            : "com.alibaba:fastjson:1.2.62",
                "jackson"                             : "com.fasterxml.jackson.core:jackson-databind:2.10.5",
                "tomcatjdbc"                          : "org.apache.tomcat:tomcat-jdbc:9.0.16",
                "lagarto"                             : "org.jodd:jodd-lagarto:5.0.7",
                //datasource
                "druid-starter"                       : "com.alibaba:druid-spring-boot-starter:${druidStarterVersion}",
                "p6spy"                               : "p6spy:p6spy:3.8.1",
                "commons-dbcp2"                       : "org.apache.commons:commons-dbcp2:2.5.0",
                "postgresql"                          : "org.postgresql:postgresql:9.4.1212",
                "h2"                                  : "com.h2database:h2:1.4.197",
                "mysql"                               : "mysql:mysql-connector-java:8.0.15",
                "mybatis-plus-core"                   : "com.baomidou:mybatis-plus-core:${mybatisPlusVersion}",
                "mybatis-plus-extension"              : "com.baomidou:mybatis-plus-extension:${mybatisPlusVersion}",
                "mybatis-plus-boot-starter"           : "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}",
                "dynamic-datasource-spring-boot-starter": "com.baomidou:dynamic-datasource-spring-boot-starter:${mybatisPlusVersion}",
                // utils
                "commons-lang3"                       : "org.apache.commons:commons-lang3:${commonsLangVersion}",
                "commons-collections4"                : "org.apache.commons:commons-collections4:${commonsCollections4Version}",
                "guava"                               : "com.google.guava:guava:27.0.1-jre",
                "UserAgentUtils"                      : "eu.bitwalker:UserAgentUtils:1.21",
                //code generator
                "mybatis-plus-generator"              : "com.baomidou:mybatis-plus-generator:${mybatisPlusVersion}",
                "velocity"                            : "org.apache.velocity:velocity-engine-core:2.0",
                "freemarker"                          : "org.freemarker:freemarker:2.3.28",
                "beetl"                               : "com.ibeetl:beetl:2.9.8",
                //swagger
                "springfox-swagger2"                  : "io.springfox:springfox-swagger2:${ingfoxSwagger2Version}",
                "springfox-swagger-ui"                : "io.springfox:springfox-swagger-ui:${ingfoxSwagger2Version}",
        ]
    }
    repositories {
        mavenLocal()
        maven{
            url AliRepositorieUrl
        }
        maven{
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVarsion}"
    }
}

// 所有项目通用配置
allprojects {
    //引入 idea 插件
    apply plugin: 'idea'

    //指定项目版本号和group
    group 'com.itkjb.exercise'
    version '1.0.0-SNAPSHOT'  // 开发阶段，新增最后一位版本号，上线阶段，去掉末版本号，保留三位版本号
}



subprojects {
    // 引入java 插件
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    // apply plugin: 'org.springframework.boot'
    // apply plugin: 'io.spring.dependency-management'

    // JVM 版本号要求
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    apply plugin: 'idea'

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    // java编译的时候缺省状态下会因为中文字符而失败，所以这儿需要改为utf8
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        maven{
            url AliRepositorieUrl
        }
        maven{
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {

        implementation lib.'spring-boot-devtools'
        testCompile(
                //lib.'juint',
                // lib.junit,
                lib.'spring-boot-starter-test',
        )
        // lombok 注意idea 中需要安装lombak插件
        annotationProcessor "${lib.lombok}"
        compileOnly "${lib.lombok}"
        testAnnotationProcessor "${lib.lombok}"
        testCompileOnly "${lib.lombok}"
    }

    task javadocJar(type: Jar,dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }

    task cleanBuildDir(type: Delete) {
        delete "${projectDir}/out"
    }
    tasks.clean.dependsOn(cleanBuildDir)

}
